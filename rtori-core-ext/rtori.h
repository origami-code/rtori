/* rtori-core headers (for C) */

#ifndef RTORI_CORE_H_
#define RTORI_CORE_H_

/* Generated with cbindgen:0.27.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include "rtori/attributes.h"


enum rtori_FoldOperationStatus
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
    rtori_FoldOperationStatus_Success = 0,
    rtori_FoldOperationStatus_ParseError,
    rtori_FoldOperationStatus_UnknownField,
};
#ifndef __cplusplus
typedef uint8_t rtori_FoldOperationStatus;
#endif // __cplusplus

typedef enum rtori_SolverKind {
    /**
     * Origami Simulator by Amanda Ghaessi
     */
    rtori_SolverKind_OrigamiSimulator,
} rtori_SolverKind;

enum rtori_SolverOperationResult
#ifdef __cplusplus
  : uint32_t
#endif // __cplusplus
 {
    rtori_SolverOperationResult_Success = 0,
    /**
     * Attempted to do an operation requiring that a model be loaded, while in "Standby"
     */
    rtori_SolverOperationResult_ErrorNotLoaded,
    /**
     * Attempted to do an operation that can only be done in the "Standby" or "Loaded" state, while it was in the "Extracting" state
     */
    rtori_SolverOperationResult_ErrorExtracting,
    rtori_SolverOperationResult_ErrorNoSuchFrameInFold,
    rtori_SolverOperationResult_ErrorOther = 255,
};
#ifndef __cplusplus
typedef uint32_t rtori_SolverOperationResult;
#endif // __cplusplus

typedef struct rtori_Context rtori_Context;

typedef struct rtori_FoldFile rtori_FoldFile;

typedef struct rtori_Solver rtori_Solver;

typedef struct rtori_Version {
    uint32_t major;
    uint32_t minor;
    uint32_t patch;
} rtori_Version;

typedef void *(*rtori_RawAlloc)(const void *ctx, size_t size, size_t alignment);

typedef void (*rtori_RawDealloc)(const void *ctx, void *ptr, size_t size, size_t alignment);

/**
 * The two function pointed to must be thread-safe
 */
typedef struct rtori_CustomAllocator {
    rtori_RawAlloc alloc;
    rtori_RawDealloc dealloc;
    const void *ctx;
} rtori_CustomAllocator;

typedef struct rtori_BackendFlags {
    uint8_t bits;
} rtori_BackendFlags;
#define rtori_BackendFlags_CPU (rtori_BackendFlags){ .bits = (uint8_t)(1 << 0) }
#define rtori_BackendFlags_CPU_MT (rtori_BackendFlags){ .bits = (uint8_t)(1 << 1) }
#define rtori_BackendFlags_GPU_METAL (rtori_BackendFlags){ .bits = (uint8_t)(1 << 3) }
#define rtori_BackendFlags_GPU_VULKAN (rtori_BackendFlags){ .bits = (uint8_t)(1 << 4) }
#define rtori_BackendFlags_GPU_DX12 (rtori_BackendFlags){ .bits = (uint8_t)(1 << 5) }
#define rtori_BackendFlags_GPU_WEBGPU (rtori_BackendFlags){ .bits = (uint8_t)(1 << 6) }
#define rtori_BackendFlags_GPU_ANY (rtori_BackendFlags){ .bits = (uint8_t)((((rtori_BackendFlags_GPU_METAL).bits | (rtori_BackendFlags_GPU_VULKAN).bits) | (rtori_BackendFlags_GPU_DX12).bits) | (rtori_BackendFlags_GPU_WEBGPU).bits) }
#define rtori_BackendFlags_ANY (rtori_BackendFlags){ .bits = (uint8_t)(((rtori_BackendFlags_GPU_ANY).bits | (rtori_BackendFlags_CPU).bits) | (rtori_BackendFlags_CPU_MT).bits) }

typedef struct rtori_Parameters {
    enum rtori_SolverKind solver;
    struct rtori_BackendFlags backend;
} rtori_Parameters;

typedef struct rtori_ExtractOutRange {
    size_t offset;
    /**
     * The connected array must be able to contain the given amount of items
     */
    size_t item_count;
} rtori_ExtractOutRange;

typedef struct rtori_ExtractOutRequest {
    float (*positions)[3];
    struct rtori_ExtractOutRange positions_range;
    float (*velocity)[3];
    struct rtori_ExtractOutRange velocity_range;
    float *error;
    struct rtori_ExtractOutRange error_range;
} rtori_ExtractOutRequest;

typedef struct rtori_FoldParseResult {
    rtori_FoldOperationStatus status;
    struct rtori_FoldFile *file;
} rtori_FoldParseResult;

typedef struct rtori_FoldEncodeResult {
    int ok;
    size_t written;
} rtori_FoldEncodeResult;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

struct rtori_Version rtori_version(void);

/**
 * Call `rtori_deinit` to deinitialize
 */
const struct rtori_Context *rtori_ctx_init(const struct rtori_CustomAllocator *parameters);

const struct rtori_Context *rtori_ctx_clone(const struct rtori_Context *ctx);

void rtori_ctx_deinit(const struct rtori_Context *ctx);

/**
 * `rtori_ctx_create_solver` creates a simulator
 */
const struct rtori_Solver *rtori_ctx_create_solver(const struct rtori_Context *ctx,
                                                   struct rtori_Parameters *parameters);

/**
 * `rtori_solver_load_from_fold` loads the simulator with data from the given `FoldFrame`
 */
rtori_SolverOperationResult rtori_solver_load_from_fold(const struct rtori_Solver *solver,
                                                        const struct rtori_FoldFile *fold,
                                                        uint16_t frame_index);

rtori_SolverOperationResult rtori_solver_step(const struct rtori_Solver *solver,
                                              uint32_t step_count);

/**
 * Extract a field to an array
 */
rtori_SolverOperationResult rtori_extract(const struct rtori_Solver *solver,
                                          const struct rtori_ExtractOutRequest *request);

/**
 * Drops a solver object. After dropping, the pointer is freed and it should not be used anymore.
 */
void rtori_solver_deinit(struct rtori_Solver *solver);

RTORI_SLICE_RO(2, 3)
struct rtori_FoldParseResult rtori_fold_parse(const struct rtori_Context *ctx,
                                              const uint8_t fold_str[],
                                              size_t fold_str_len);

RTORI_SLICE_WO(2, 3)
struct rtori_FoldEncodeResult rtori_fold_encode(const struct rtori_FoldFile *fold,
                                                uint8_t *output,
                                                size_t output_size);

/**
 * Drops a fold object. After dropping, the pointer is freed and it should not be used anymore.
 */
void rtori_fold_deinit(const struct rtori_FoldFile *fold);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  /* RTORI_CORE_H_ */
